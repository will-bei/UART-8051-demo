$INCLUDE (AT89LP428.inc)
$INCLUDE(.\UART_Project.h)

;Define DATA
TIME_SECOND_L			DATA 00h
TIME_SECOND_H			DATA 01h
TIME_MINUTE				DATA 02h
TIME_HOUR				DATA 03h
MSG1					DATA 30H ;LCD page
MSG2					DATA 31H ;LCD column high
MSG3					DATA 32H ;LCD column low
MSG4					DATA 33H ;LCD write data

;msg backups
RDATA1					DATA 40H
RDATA2					DATA 41H
RDATA3					DATA 42H
RDATA4					DATA 43H

;RECEIVE_COUNTER_FLAG bits:
;7		6		5		4		3		2		1		0
;FLAG	Res.	Res.	Res.	Res.	Res.	CNT1	CNT0
RECEIVE_COUNTER_FLAG	DATA 50H

TIME_SECOND				DATA 54H
DISPFLAG				DATA 55H
COLADDRESS				DATA 56H
WDATA					DATA 57H
LCD_DATA				DATA 58H
ADD_COUNTER				DATA 59H
;SBUF					DATA 99H

;Define BIT ADDRESS
LCD_A0			BIT 	P4.2
LCD_CS			BIT     P3.4
LCD_WR			BIT     P3.5
B_RSTB			BIT		P3.6
LCD_RD			BIT     P3.7

;SCON Bit Address
;SM0				BIT		SCON.7
;SM1				BIT		SCON.6
;SM2				BIT		SCON.5
;REN				BIT		SCON.4
;TB8				BIT		SCON.3
;RB8				BIT		SCON.2
;T1					BIT		SCON.1
;R1					BIT		SCON.0

;Interrupt Bit Address
;EX0				BIT		IE.0
;ET0				BIT		IE.1
;EX1				BIT		IE.2
;ET1				BIT     IE.3
;ET2				BIT		IE.5
;EA					BIT		IE.7

; INTERRUPT PRIORITY LOW BIT ADDRESS
;PX0				BIT     IP.0
;PT0				BIT 	IP.1
;PX1				BIT		IP.2
;PT1				BIT		IP.3
;PT2				BIT		IP.5
IP0D				BIT		IP.7

; INTERRUPT PRIORITY HIGH BIT ADDRESS
;PX0H			BIT		IPH.0
;PT0H			BIT     IPH.1
;PX1H           BIT 	IPH.2
;PT1H			BIT 	IPH.3
;PT2H			BIT		IPH.5
;IP1D			BIT		IPH.7

;TCON BIT ADDRESS
;IT0				BIT		TCON.0
;IE0				BIT		TCON.1
;IT1				BIT		TCON.2
;IE1				BIT		TCON.3
;TR0				BIT		TCON.4
;TF0				BIT		TCON.5
;TR1				BIT		TCON.6
;TF1				BIT		TCON.7

; DEFINE Constants
DATA_BUFFER_START       EQU 030H
TIMER_RELOADVALUE_L 	EQU 000H 
TIMER0_RELOADVALUE_H	EQU 006H
TIMER1_RELOADVALUE_H	EQU 0DCh;7.7Mhz and CB is 8 Mhz,DC is 11.092Mhz clock
TMOD_TIMER0_VALUE		EQU 020h
TCON_TIMER0_VALUE		EQU 050h;enable both timer1 and timer 0
TIME_SECOND_L_RELOAD	EQU 0B4h 
TIME_SECOND_H_RELOAD	EQU 0E2h 
TIME_MINUTE_RELOAD		EQU 0C4h
CLKREG_VALUE			EQU 000h
RFLAG_RELVALUE			EQU 0FCH
TIME_SECOND_REL 		EQU 082H
SCON_REL_VALUE			EQU 050H; mode 1 
;dSCON_REL_VALUE		EQU 0D0H; mode 3
MSG_SIZE				EQU	004H
MSG_REC					EQU 001H

org 0000h
LJMP init

org 000Bh
LJMP TIMER0_PROCESS

org 0023h
LJMP SPINT_PROCESS

org 0100h
init:
; Timer 0 configure 0.1s timer. TPS value is FH
MOV PCON, #00H
CLR B_RSTB
SETB EA
SETB ET0
MOV TL0, #TIMER_RELOADVAlUE_L
MOV TH0, #TIMER0_RELOADVALUE_H
MOV CLKREG, #CLKREG_VALUE
MOV RH0, #TIMER0_RELOADVALUE_H
MOV RL0, #TIMER_RELOADVALUE_L
MOV TCON, #TCON_TIMER0_VALUE
MOV SCON, #SCON_REL_VALUE
;UART Init
  ;P3 init
MOV P3M0, #01H
MOV P3M1, #02H
SETB P3.0
SETB P3.1
  ;Baud rate define 9.6K bit/s
MOV TH1, #TIMER1_RELOADVALUE_H
MOV TMOD, #TMOD_TIMER0_VALUE ;Timer 1 Mode 2
  ;RX interrupt enable
SETB REN
SETB ES
CLR RI
MOV RECEIVE_COUNTER_FLAG,#0FFH;
MOV MSG1,#01H
MOV MSG2,#05H
MOV MSG3,#0FFH
MOV MSG4,#0CCH

; Initial LCD Panel 128 x 64 bits
SETB B_RSTB
CLR  LCD_A0
SETB LCD_CS
SETB LCD_WR
SETB LCD_RD
MOV LCD_DATA,#0A2H; Bias 1/9
LCALL LCD_COMMAND
MOV LCD_DATA,#0A0H;ADC slect normal
LCALL LCD_COMMAND
MOV LCD_DATA,#0C8H; Select COM output reversed
LCALL LCD_COMMAND
NOP
NOP
;MOV LCD_DATA,#0C0H;COM output normal direction
;LCALL LCD_COMMAND
MOV LCD_DATA,#40H; LCD START LINE 0
LCALL LCD_COMMAND
MOV LCD_DATA,#25H; Select internal resistor ratio
LCALL LCD_COMMAND
MOV LCD_DATA,#81H ; ELECTORNIC VOLUEME Command
LCALL LCD_COMMAND
MOV LCD_DATA,#15H; Electornic Volume
LCALL LCD_COMMAND
MOV LCD_DATA,#2FH; INternal Power supply
LCALL LCD_COMMAND
MOV LCD_DATA,#0AFH; LCD ON
LCALL LCD_COMMAND

;Clear the display
clrdisp:
;set page to page 0
CLR LCD_A0
MOV LCD_DATA, #0B0H
LCALL LCD_COMMAND
LCALL clrlines
;set page to page 1
CLR LCD_A0
MOV LCD_DATA, #0B1H
LCALL LCD_COMMAND
LCALL clrlines
;set page to page 2
CLR LCD_A0
MOV LCD_DATA, #0B2H
LCALL LCD_COMMAND
LCALL clrlines
;set page to page 3
CLR LCD_A0
MOV LCD_DATA, #0B3H
LCALL LCD_COMMAND
LCALL clrlines
;set page to page 4
CLR LCD_A0
MOV LCD_DATA, #0B4H
LCALL LCD_COMMAND
LCALL clrlines
;set page to page 5
CLR LCD_A0
MOV LCD_DATA, #0B5H
LCALL LCD_COMMAND
LCALL clrlines
;set page to page 6
CLR LCD_A0
MOV LCD_DATA, #0B6H
LCALL LCD_COMMAND
LCALL clrlines
;set page to page 7 
CLR LCD_A0
MOV LCD_DATA, #0B7H
LCALL LCD_COMMAND
LCALL clrlines

;UART segment
UART:
MOV RDATA1, MSG1
MOV RDATA2, MSG2
MOV RDATA3, MSG3
MOV RDATA4, MSG4
MOV A, RECEIVE_COUNTER_FLAG
ANL A, #80H
JZ UART

UART_true:
;disable UART interrupt
;reset counter/flag
MOV RECEIVE_COUNTER_FLAG, #00H
;pg set
CLR LCD_A0
MOV LCD_DATA, RDATA1
LCALL LCD_COMMAND
;col address set
MOV LCD_DATA, RDATA2
LCALL LCD_COMMAND
MOV LCD_DATA, RDATA3
LCALL LCD_COMMAND
;write data
MOV WDATA, MSG4
LCALL WRITEDATA

;SEND_OK1:
;disable receive
;CLR REN
;CLR ES

;SEND_OK2:
;send message OK byte
;MOV SBUF, #MSG_REC
;MOV SBUF, RDATA1

;WAIT:
;MOV C, TI
;JNC WAIT
;CLR TI
;MOV SBUF, RDATA2
;WAIT1:
;MOV C, TI
;JNC WAIT1
;CLR TI
;MOV SBUF, RDATA3
;WAIT2:
;MOV C, TI
;JNC WAIT2
;CLR TI
;MOV SBUF, RDATA4

;WAIT3:
;;MOV C, TI
;JC ENABLE_UART_REC
;MOV A, DISPFLAG
;JZ WAIT3

;ENABLE_UART_REC:
;enable UART receiver
;CLR TI

;SETB REN
;SETB ES
LJMP UART

RET

org 0600h
;code for clearing all lines on a page
clrlines:
MOV ADD_COUNTER, #7CH
MOV COLADDRESS, #00H
MOV WDATA, #00H

clrlines_loop:
LCALL COLADD_SET 
LCALL WRITEDATA
MOV A, ADD_COUNTER
INC A
MOV ADD_COUNTER, A
MOV A, COLADDRESS
INC A
MOV COLADDRESS, A
JZ clrlines_return
SJMP clrlines_loop

clrlines_return:
RET

org 0650h
COLADD_SET:
CLR LCD_A0
;set lower bit
MOV A, COLADDRESS
ANL A, #0FH
MOV LCD_DATA, A
LCALL LCD_COMMAND
;set higher bit
MOV A, COLADDRESS
ANL A, #0F0H
SWAP A
ADD A, #10H
MOV LCD_DATA, A
LCALL LCD_COMMAND
RET

org 0675h
WRITEDATA:
;write in pixel data
SETB LCD_A0
MOV LCD_DATA, WDATA
LCALL LCD_COMMAND
RET

org 0700h
LCD_COMMAND:
CLR LCD_CS ;
CLR LCD_WR
MOV P1, LCD_DATA;
SETB LCD_WR
SETB LCD_CS
RET

org 0750h
TIMER0_PROCESS:
PUSH ACC	
PUSH DPL
PUSH DPH
SJMP NEXT_TIMER0

NEXT_TIMER0:
MOV A, TIME_SECOND
INC A
MOV TIME_SECOND, A
JZ SECOND_FLAG
SJMP TIMER0_RETURN

SECOND_FLAG:
MOV TIME_SECOND, #TIME_SECOND_REL ;#82H
MOV A, DISPFLAG
JNZ DF_WAS_TRUE
MOV DISPFLAG, #01H
SJMP TIMER0_RETURN

DF_WAS_TRUE:
MOV DISPFLAG, #00H

TIMER0_RETURN:
POP DPH
POP DPL
POP ACC
RETI

org 0300h
SPINT_PROCESS:
;push
PUSH ACC
PUSH B
PUSH DPH
PUSH DPL

;disable interrupt
;CLR REN
MOV C, RI;
JNC SPINT_RETURN;
CLR RI
;data buffer address bit 1 and 0 -> A
MOV A, RECEIVE_COUNTER_FLAG
;generate data buffer address
ORL A, #DATA_BUFFER_START
;move receive data to data buffer
MOV R1, A
;move received data to R1 location
MOV A, SBUF
MOV @R1, A
MOV SBUF,A
;increment RECEIVE_COUNTER_FLAG
;if all messages received set message flag
;if message flag is 1, receive data and write to LCD
MOV A, RECEIVE_COUNTER_FLAG
INC A
MOV RECEIVE_COUNTER_FLAG, A
CJNE A, #MSG_SIZE, SPINT_RETURN
ORL A, #80H
MOV RECEIVE_COUNTER_FLAG, A

SPINT_RETURN:
CLR TI
;SETB REN
POP DPL
POP DPH
POP B
POP ACC
RETI

END